[
  {
    "title": "Java functional interfaces reference",
    "category": "",
    "tags": "java",
    "url": "/2022/07/15/java-functional-interfaces-reference/",
    "date": "Jul 15, 2022",
    "content": "post quick reference built-in functional interfaces java api interface exaclty abstract method default static methods implementation annotated functionalinterface indicating intented defined introduced 8 lambda expressions extensively stream familiar main input produce output consumer void accept supplier function apply predicate boolean test variations arguments tables handy consumers suppliers functions predicates runnable represents operation accepts single argument returns result biconsumer doubleconsumer double intconsumer int longconsumer long objdoubleconsumer objintconsumer objlongconsumer booleansupplier getasboolean doublesupplier getasdouble intsupplier getasint longsupplier getaslong produces operations meant return doublefunction intfunction longfunction todoublefunction applyasdouble tointfunction applyasint tolongfunction applyaslong doubletointfunction doubletolongfunction inttodoublefunction inttolongfunction longtodoublefunction longtointfunction unaryoperator doubleunaryoperator operand intunaryoperator longunaryoperator bifunction binaryoperator t1 t2 todoublebifunction tointbifunction tolongbifunction doublebinaryoperator left intbinaryoperator longbinaryoperator boolean-valued bipredicate doublepredicate intpredicate longpredicate jdk 1 0 defines",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2022/07/15/java-functional-interfaces-reference/'> <img src='/assets/images/posts/2022-07-15-java-functional-interfaces-reference/cover.jpg' alt='Java functional interfaces reference'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>12 min read •  <time class='article__date' datetime='2022-07-15T17:00:00+00:00'>15 Jul 2022</time> </span> </div><h2 class='article__title'>Java functional interfaces reference</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Should HTTP PUT create a resource if it does not exist?",
    "category": "",
    "tags": "http",
    "url": "/2021/07/29/should-http-put-create-a-resource-if-it-does-not-exist/",
    "date": "Jul 29, 2021",
    "content": "question stack overflow provide answer upvotes thought deserve cross-post http create resource exist depends ultimate decision identifiers generated server client generate fine creating resources hand generates behalf post parts method definition quoted sentence supports mentioned highlight 4 3 requests target created replaced defined representation enclosed request message payload current creates origin inform user agent sending 201 response modified send 200 204 content successful completion proper interpretation presumes desired service selects uri receiving state-changing implemented additional details sake completeness relevant quotes process resource’s specific semantics functions identified result processing location header field identifier primary describes status referring code newly located assume effective 6 2 fulfilled received",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/07/29/should-http-put-create-a-resource-if-it-does-not-exist/'> <img src='/assets/images/posts/2021-07-29-should-http-put-create-a-resource-if-it-does-not-exist/cover.jpg' alt='Should HTTP PUT create a resource if it does not exist?'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read •  <time class='article__date' datetime='2021-07-29T17:00:00+00:00'>29 Jul 2021</time> </span> </div><h2 class='article__title'>Should HTTP PUT create a resource if it does not exist?</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/http' class='article__tag'>http</a> </span></div></div></div></div></div>"
  },

  {
    "title": "100k reputation points on Stack Overflow",
    "category": "",
    "tags": "personal",
    "url": "/2021/04/28/100k-reputation-points-on-stack-overflow/",
    "date": "Apr 28, 2021",
    "content": "yesterday reached 100 000 reputation points stack overflow largest online community professional programmers enthusiasts defines content posted user relevant trusted write post 14 5 users registered 1 001 hit milestone day numbers achievement participation quest matters learned experience 100+ answers helped software engineer learning sharing knowledge helping",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/04/28/100k-reputation-points-on-stack-overflow/'> <img src='/assets/images/posts/2021-04-28-100k-reputation-points-on-stack-overflow/cover.jpg' alt='100k reputation points on Stack Overflow'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2021-04-28T00:00:00+00:00'>28 Apr 2021</time> </span> </div><h2 class='article__title'>100k reputation points on Stack Overflow</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/personal' class='article__tag'>personal</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Combining the Jackson Streaming API with ObjectMapper for parsing JSON",
    "category": "",
    "tags": "java, jackson, json",
    "url": "/2019/08/19/combining-jackson-streaming-api-with-objectmapper-for-parsing-json/",
    "date": "Aug 19, 2019",
    "content": "jackson streaming api parse huge json documents loading content memory efficient process lowest processing overhead cost convenient post advantage losing powerful capabilities data binding objectmapper heavy examples code github table contents introduction jsonparser parsing jsongenerator generating demonstration purposes array element represents contact 1 firstname john lastname doe emails mail createddatetime 2019-08-19t20 30 00z 2 jane poe janep 45 mapped instance defined public class private integer string list offsetdatetime applications mapper registermodule javatimemodule contacts readvalue typereference situations couple millions elements hold fallback inspired stax event-based xml term token event reflects structure main types type description logical cursor iterating tokens providing level reader writer jsonfactory factory creating instances read write processed exact order input output mention random access tree model apis hood reading writing iterate stream application advances calling nexttoken method properties points calls accessors refer property pointed-to track bit context nesting numbers document void parsejson inputstream throws ioexception create createparser check jsontoken start_array throw illegalstateexception expected end_array readcontact dosomethingwithcontact currenttoken start_object object end_object current getcurrentname evaluate extract switch case setid getintvalue break setfirstname gettext setlastname reademails setemails setcreateddatetime unknown return arraylist add terms consumption conveninent verbose repetitive tedious combine reduce verbosity file configure disable deserializationfeature fail_on_unknown_properties getfactory mix configuration modules deserialization features custom deserializers construct based sequence generate generatejson outputstream os creategenerator pretty print usedefaultprettyprinter start writestartarray writecontact writeendarray writestartobject field pair writenumberfield getid writestringfield getfirstname getlastname writefieldname writeemails getemails createdatetime getcreateddatetime format datetimeformatter iso_offset_date_time writeendobject email writestring wrap combining serializationfeature write_dates_as_timestamps enable indent_output writevalue allowing approach takes serialization serializers",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/08/19/combining-jackson-streaming-api-with-objectmapper-for-parsing-json/'> <img src='/assets/images/posts/2019-08-19-combining-jackson-streaming-api-with-objectmapper-for-parsing-json/cover.jpg' alt='Combining the Jackson Streaming API with ObjectMapper for parsing JSON'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>13 min read •  <time class='article__date' datetime='2019-08-19T17:00:00+00:00'>19 Aug 2019</time> </span> </div><h2 class='article__title'>Combining the Jackson Streaming API with ObjectMapper for parsing JSON</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/json' class='article__tag'>json</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Comparing JSON documents in Java with JSON-P",
    "category": "",
    "tags": "java, json, javax-json",
    "url": "/2019/08/08/comparing-json-documents-in-java-with-jsonp/",
    "date": "Aug 8, 2019",
    "content": "previous post demonstrated compare json documents jackson gson advantage java 8 streams guava comparing flat maps approach comparison perspective json-p api processing table contents representing differences patch merge create creating document pretty printing producing applying patches references simply focus listing represents compared great applied yielding diving code perform standard formats represent meant set instructions describing target modified suitable payload requests details format expressing sequence operations defined rfc 6902 identified application json-patch+json media type array objects object single operation evaluation sequentially order continues error condition encountered op member description add adds location exists replaced remove removes replace replaces copy copies test tests equal values considered errors describes syntax closely mimics 7396 merge-patch+json server determine exact requested content current members null existing removed remain untouched defines portable apis javax package parse generate transform query model streaming 1 0 initially jsr 353 brought oracle calls official support ee 374 evolved introduced quick start familiar factory class jsonpatch implementation jsonmergepatch jsonvalue immutable number string true false jsonstructure super structured types highlight work interesting apache johnzon -- dependency groupid artifactid json-api version javax-json org johnzon-core purposes jpa hibernate tied representations source yields creatediff method diff createmergediff mergediff contact john doe address birthday 1980-01-01 company acme occupation software engineer phones 000000000 999999999 mobile jane nickname jenny 1990-01-01 111111111 favorite groups close-friends gym visualization print println tojsonarray tojsonvalue public static stringwriter prettyprint return tostring void writer map config collections singletonmap jsongenerator pretty_printing jsonwriterfactory writerfactory createwriterfactory jsonwriter createwriter write produce createreader stringreader leftjsondocument readvalue rightjsondocument asjsonobject output path applies patched apply produces closer properties account unordered collection pairs 8259 boolean key difference property semantics quoting special meaning removal design modifications structure explicit syntaxes",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/08/08/comparing-json-documents-in-java-with-jsonp/'> <img src='/assets/images/posts/2019-08-08-comparing-json-documents-in-java-with-jsonp/cover.jpg' alt='Comparing JSON documents in Java with JSON-P'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>15 min read •  <time class='article__date' datetime='2019-08-08T23:00:00+00:00'>08 Aug 2019</time> </span> </div><h2 class='article__title'>Comparing JSON documents in Java with JSON-P</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/javax-json' class='article__tag'>javax-json</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Log aggregation with Spring Boot, Elastic Stack and Docker",
    "category": "",
    "tags": "java, log, spring-boot, docker, elasticsearch, beats, logstash, kibana, json, slf4j, logback, elastic-stack",
    "url": "/2019/06/30/log-aggregation-with-spring-boot-elastic-stack-and-docker/",
    "date": "Jun 30, 2019",
    "content": "microservices architecture single business operation trigger chain downstream microservice calls pretty challenging debug easier logs centralized log event details trace interactions applications post demonstrates elastic stack docker collect process store visualize spring boot approach github table contents elasticsearch kibana beats logstash putting pieces streams events logging logback slf4j enhancing tracing json format running building creating images spinning containers visualizing group open source designed data search analyze real time elk letters stood fourth application subsequently rendering potential acronym unpronounceable quick component real-time distributed storage json-based analytics engine horizontal scalability maximum reliability easy management purposes context excels indexing semi-structured decoded network packets visualization platform work view interact stored indices allowing advanced analysis variety charts tables maps shippers installed agents servers send operational processed enhanced number filebeat files metricbeat metrics packetbeat heartbeat uptime monitoring intend ship choice powerful tool integrates wide deployments offers large selection plugins parse enrich transform buffer sources requires additional processing deployment illustration components collects sends logststash enhances stores indexes displays twelve-factor app methodology set practices software service define stream aggregated time-ordered collected output processes backing services provide visibility behavior recommends treated concerns routing attempt write manage logfiles writes unbuffered stdout local development developer foreground terminal observe app’s staging production deploys process’ captured execution environment collated routed final destinations viewing long-term archival visible configurable completely managed mind file watched realtime tail preferably depends spring-boot-starter-web artifact pulled transitive dependency default mature flexible preferable facade abstraction frameworks logger instance loggerfactory public class getlogger verbose avoid repeating classes perform lombok annotation generating field equivalent level info warn error parametrized messages syntax string concatenation incur cost parameter construction case disabled list size configured logback-spring xml located resources folder configuration advantage profiles templating features cloud sleuth enhance solution adds span represents basic unit sending http request spans forming tree-like structure remain providing classpath instrumented automatically ids slf4j’s mapped diagnostic mdc included dependencymanagement dependencies groupid org springframework artifactid spring-cloud-sleuth version type pom scope import spring-cloud-starter-sleuth produce plain text indexed documents good idea accomplish encoder encoders layouts appenders originally written support logstash’s evolved general-purpose highly-configurable structured mechanism dataformats managing standard consoleappender leave responsibility writing simple logstashencoder pre-defined providers 1 0 encoding utf-8 springproperty application_name appender jsonconsoleappender ch qos core net root appender-ref bear actual formatted timestamp 2019-06-29t23 01 38 967+01 00 message finding logger_name cassiomolin logaggregation postservice thread_name http-nio-8001-exec-3 level_value 20000 post-service traceid c52d9ff782fa8f6e spanid spanexportable false x-span-export x-b3-spanid x-b3-traceid includes values properties logged flexibility loggingeventcompositejsonencoder composite add customize timezone utc loglevel loggername threadname pattern omitemptyfields true trace_id span_id parent_span_id x-b3-parentspanid exportable excludemdckeyname parentid stacktrace sample 2019-06-29t22 967z multiple compose application’s yaml command create start cool stuff defined docker-compose yml highlight fact labels simply metadata meaning collect_logs_with_filebeat produced container decode_log_event_to_json_object property document label decode object comment captures json-file driver var lib directory moving targets autodiscover feature track adapt settings happen defining templates subsystem monitor discovered runs port 5044 - dedot condition config paths processors decode_json_fields equals fields target overwrite_keys hosts processor chained executed order receives applies action input rich pipeline required elements optional element filter consume modify destination conf receive coming adding tag logstash_filter_applied 9200 mutate add_tag finally exposes ui 5601 blog manages posts comments exposing api focus aggregation invoke demonstration handled memory requests supported representation requested aggregate return client build code spin starting ensure java 11 maven 3 clone repository git https log-aggregation-spring-boot-elastic-stack dockerfile-maven plugin spotify integrate image check dockerfile pox change comment-service cd mvn clean install parent project resides favourite browser localhost attempting access ready displayed calm minute play explore generate click link left hand discover icon patterns retrieving created matching logstash- step button started enter pick filtering choose box update 8001 wait seconds refresh left-hand hover criteria match entire haven assigned tracking host elasticseach folders destroy lost",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/06/30/log-aggregation-with-spring-boot-elastic-stack-and-docker/'> <img src='/assets/images/posts/2019-06-30-log-aggregation-with-spring-boot-elastic-stack-and-docker/cover.jpg' alt='Log aggregation with Spring Boot, Elastic Stack and Docker'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>22 min read •  <time class='article__date' datetime='2019-06-30T00:53:00+00:00'>30 Jun 2019</time> </span> </div><h2 class='article__title'>Log aggregation with Spring Boot, Elastic Stack and Docker</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/log' class='article__tag'>log</a>  <a href='/tag/spring-boot' class='article__tag'>spring-boot</a>  <a href='/tag/docker' class='article__tag'>docker</a>  <a href='/tag/elasticsearch' class='article__tag'>elasticsearch</a>  <a href='/tag/beats' class='article__tag'>beats</a>  <a href='/tag/logstash' class='article__tag'>logstash</a>  <a href='/tag/kibana' class='article__tag'>kibana</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/slf4j' class='article__tag'>slf4j</a>  <a href='/tag/logback' class='article__tag'>logback</a>  <a href='/tag/elastic-stack' class='article__tag'>elastic-stack</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Asserting exceptions in JUnit",
    "category": "",
    "tags": "java, junit, test",
    "url": "/2019/06/23/asserting-exceptions-in-junit/",
    "date": "Jun 23, 2019",
    "content": "post explores techniques asserting exceptions java junit table contents try-catch fail test expected rule expectedexception assertthrows 5 assertj thoughts approach code excepted throw exception wrapped block method called thrown fails assertions performed caught import org static hamcrest corematchers instanceof assert assertthat public class usingtrycatchwithfail private foo void dostuff_shouldthrowexception fooexception dostuff catch getmessage occurred getcause illegalstateexception annotation usingtestwithexpected simple lacks ability message good messages valuable account depending written discouraged expectation itended tested leading false positives preparetodostuff_shouldsucceed_dostuff_shouldthrowexception lead positive result preparetodostuff supposed actual asserted making exeption rules core isinstanceof usingrulewithexpectedexception final expect expectmessage expectcause attempts caveats issues finally behaviour-driven development bdd writing style aims solve problems 4 takes advantage 8 features lambdas longer replacement introduced asserts execution supplied executable throws type returns instance jupiter api displayname matcherassert usingassertthrowsfromjunit5 throwable - rich fluent improve readability maintenance tests easier providing strongly-typed intuitive failure 3 leverage assertthatexceptionoftype assertthatthrownby catchthrowable usingassertjwithjava8 dostuff_shouldthrowexception_1 isthrownby withmessage withcauseexactlyinstanceof dostuff_shouldthrowexception_2 hasmessage hascauseexactlyinstanceof dostuff_shouldthrowexception_3 dostuff_shouldthrowexception_4 catchthrowableoftype 7 2 perform failbecauseexceptionwasnotthrown usingassertjwithjava7 evaluating approaches avoid simply stick bit clumsy hope power encourage close plain english boosts",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/06/23/asserting-exceptions-in-junit/'> <img src='/assets/images/posts/2019-06-23-asserting-exceptions-in-junit/cover.jpg' alt='Asserting exceptions in JUnit'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>10 min read •  <time class='article__date' datetime='2019-06-23T10:10:00+00:00'>23 Jun 2019</time> </span> </div><h2 class='article__title'>Asserting exceptions in JUnit</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/junit' class='article__tag'>junit</a>  <a href='/tag/test' class='article__tag'>test</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Using HTTP PATCH in Spring",
    "category": "",
    "tags": "java, json, jackson, spring-boot, javax-json, rest, http, patch",
    "url": "/2019/06/10/using-http-patch-in-spring/",
    "date": "Jun 10, 2019",
    "content": "post demonstrates approach support http patch json merge performing partial modifications resources spring lots misunderstanding works aim clarify usage diving actual solution heavy code examples source github postman collection play api table contents problem describing resource modified json-p java processing parsing request payload creating controller methods applying validating bonus decoupling domain model references manage contacts server represented document 1 john appleseed work title engineer company acme phones phone 0000000000 type mobile promoted senior contact list updated modify host org content-type application send representation single field desirable situations method defined rfc 7231 documents define protocol 4 3 requests target created replaced enclosed message definition meant replacing key gap 5789 2 set entity applied identified request-uri format called media difference reflected processes version stored client requesting instructions produce enforce mentioning formats patched expressing sequence operations 6902 json-patch+json represents array objects object operation evaluation sequentially order continues error condition encountered op member perform description add adds location exists remove removes replace replaces copy copies test tests equal values considered errors john’s job path describes syntax closely mimics 7396 merge-patch+json determine exact requested comparing content current members null existing removed remain untouched 0 jsr 353 brought official ee 374 introduced quick start familiar factory class jsonpatch implementation jsonmergepatch jsonvalue immutable number string true false jsonstructure super structured types jsonobject create createpatchbuilder build apply mergepatch createmergepatch createobjectbuilder highlight interfaces apache johnzon dependency groupid artifactid johnzon-core parse account incoming converted instance mvc instances provide custom httpmessageconverter fortunately pretty straightforward convenience extend abstracthttpmessageconverter annotate component pick public jsonpatchhttpmessageconverter extends constructor invoke parent’s indicating supported converter mediatype valueof supports override protected boolean clazz return isassignablefrom implement read convert readinternal httpinputmessage inputmessage throws httpmessagenotreadableexception jsonreader reader createreader getbody createpatch readarray catch exception throw getmessage write responses void writeinternal httpoutputmessage outputmessage httpmessagenotwritableexception jsonwriter writer createwriter tojsonarray handled jsonmergepatchhttpmessageconverter readvalue tojsonvalue converters place receive arguments annotated requestbody patchmapping consumes responseentity updatecontact pathvariable long patchdocument mergepatchdocument worth mention operate bean conversions jackson extension module jsonvalues normal advantage powerful data-binding features fasterxml datatype jackson-datatype-jsr353 classpath configure objectmapper expose picked injected beans setdefaultpropertyinclusion include non_null disable deserializationfeature fail_on_unknown_properties serializationfeature write_dates_as_timestamps findandregistermodules tells search register modules including alternatively manually mapper registermodule jsr353module configured inject targetbean beanclass convertvalue contactservice findcontact orelsethrow resourcenotfoundexception contactpatched persist 204 succeeded nocontent persisting ensure lead invalid validation annotations constraints valid notblank private validator validate constraint violated constraintviolation constraintviolationexception handle applypatch beanpatched excetion violations isempty simply care returned validated trigger models represent data concerns decoupled break clients rename service layer operates persistence controllers evolve business requirements versions deprecate released perfectly achieve minimize boilerplate converting vice versa rely frameworks mapstruct lombok generate getters setters equals hashcode tostring fields attempt contactresourceinput interface componentmodel contactmapper ascontactresourceinput update contactresource mappingtarget exposed reflections creates check conversion handling map contactresourcepatched details comparision purposes putmapping semantics javax footnotes identifiers answer stack overflow 8617 benefits",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/06/10/using-http-patch-in-spring/'> <img src='/assets/images/posts/2019-06-10-using-http-patch-in-spring/cover.jpg' alt='Using HTTP PATCH in Spring'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>27 min read •  <time class='article__date' datetime='2019-06-10T23:35:00+00:00'>10 Jun 2019</time> </span> </div><h2 class='article__title'>Using HTTP PATCH in Spring</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/spring-boot' class='article__tag'>spring-boot</a>  <a href='/tag/javax-json' class='article__tag'>javax-json</a>  <a href='/tag/rest' class='article__tag'>rest</a>  <a href='/tag/http' class='article__tag'>http</a>  <a href='/tag/patch' class='article__tag'>patch</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Comparing JSON documents in Java",
    "category": "",
    "tags": "java, json, jackson, gson, guava",
    "url": "/2018/07/23/comparing-json-documents-in-java/",
    "date": "Jul 23, 2018",
    "content": "challenge comparing json documents java post describes details approaches accomplish task set key pairs approach read map instances compare reading pretty straightforward jackson gson popular parsers objectmapper mapper typereference string object type leftmap readvalue leftjson rightmap rightjson typetoken gettype fromjson guava’s maps difference returns mapdifference instance left good complex nested objects arrays document represented nice comparison flat creating wrote utility class import util abstractmap simpleentry linkedhashmap list entry stream intstream public final flatmaputil private throw assertionerror static flatten return entryset flatmap collect - + getkey getvalue putall null instanceof properties range 0 size maptoobj pointer notation defined rfc 6901 easily locate values john doe address birthday 1980-01-01 company acme occupation software engineer phones number 000000000 999999999 mobile jane nickname jenny 1990-01-01 111111111 favorite true groups close-friends gym code differences leftflatmap rightflatmap println entries n-------------------------- entriesonlyonleft foreach nentries entriesonlyonright differing entriesdiffering common entriesincommon produce output -------------------------- 1 method account order elements quoting 8259 defines format highlights unordered collection boolean array ordered sequence describing json-p worth focus producing represents compared great diff merged yielding",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2018/07/23/comparing-json-documents-in-java/'> <img src='/assets/images/posts/2018-07-23-comparing-json-documents-in-java/cover.jpg' alt='Comparing JSON documents in Java'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read •  <time class='article__date' datetime='2018-07-23T19:03:00+00:00'>23 Jul 2018</time> </span> </div><h2 class='article__title'>Comparing JSON documents in Java</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/gson' class='article__tag'>gson</a>  <a href='/tag/guava' class='article__tag'>guava</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Maven cheat sheet",
    "category": "",
    "tags": "java, maven",
    "url": "/2017/12/12/maven-cheat-sheet/",
    "date": "Dec 12, 2017",
    "content": "maven commands properties command options creating project jar mvn archetype generate -dgroupid -dartifactid application war -darchetypeartifactid maven-archetype-webapp setting source code encoding build sourceencoding utf-8 java version compiler 1 8 target default lifecycle consist phases phase description validate checking correct compile store classes test tests package compiled distributable format sucg verify checks valid meets quality criteria install local repository dependency projects locally deploy copies final remote execute option -dskiptests -dmaven skip true -x --debug enable debug output -u --update-snapshots forces check updated releases snapshots repositories -o --offline work offline network connection -l file path --log-file writes -v --version display property groupid project’s group artifactid artifact basedir directory pom xml baseuri uri sourcedirectory testsourcedirectory outputdirectory testoutputdirectory directories finalname created built packaged time timestamp utc start yyyy-mm-dd hh mm ss override class installation vendor runtime environment separator os operating arch architecture user user’s account dir current working plugins plugin capability manipulate artifacts tree resolve dependencies resolve-plugins versions manage set -dgeneratebackuppoms false -dnewversion assembly aggregate modules files single archive release shade uber-jar including javadoc javadocs html site apidocs resources complete reference introduction",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/12/12/maven-cheat-sheet/'> <img src='/assets/images/posts/2017-12-12-maven-cheat-sheet/cover.jpg' alt='Maven cheat sheet'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read •  <time class='article__date' datetime='2017-12-12T13:27:30+00:00'>12 Dec 2017</time> </span> </div><h2 class='article__title'>Maven cheat sheet</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/maven' class='article__tag'>maven</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Stop using the RFC 2616",
    "category": "",
    "tags": "http",
    "url": "/2017/11/22/stop-using-the-rfc-2616/",
    "date": "Nov 22, 2017",
    "content": "rfc 2616 reference http 1 protocol time forget relevant answer questions stack overflow surprised developers quote nowadays specification inittially defined 2068 released january 1997 improvements updates june 1999 2014 obsoleted set rfcs collectively form 7230 message syntax routing 7231 semantics content 7232 conditional requests 7233 range 7234 caching 7235 authentication",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/11/22/stop-using-the-rfc-2616/'> <img src='/assets/images/posts/2017-11-22-stop-using-the-rfc-2616/cover.jpg' alt='Stop using the RFC 2616'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2017-11-22T09:32:24+00:00'>22 Nov 2017</time> </span> </div><h2 class='article__title'>Stop using the RFC 2616</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/http' class='article__tag'>http</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Customizing ObjectMapper in a JAX-RS application",
    "category": "",
    "tags": "java, jackson, json, jax-rs",
    "url": "/2017/11/21/customizing-objectmapper-in-a-jaxrs-application/",
    "date": "Nov 21, 2017",
    "content": "jackson json provider jax-rs application redefine default behaviour fine-tune serializarion deserialization processes achieved contextresolver objectmapper public class objectmappercontextresolver implements private final mapper createobjectmapper override getcontext type return disable deserializationfeature fail_on_unknown_properties hood instance created picked jacksonjsonprovider implementation messagebodyreader messagebodywriter binds content java objects reason access context annotation inject providers resource classes resolver getcontextresolver mediatype wildcard_type serialization settings enable serializationfeature indent_output accept_empty_string_as_null_object fail_on_empty_beans write_dates_as_timestamps applications 8 register modules registermodule jdk8module javatimemodule parameternamesmodule forget add dependencies project dependency groupid fasterxml module artifactid jackson-module-parameter-names version datatype jackson-datatype-jdk8 jackson-datatype-jsr310",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/11/21/customizing-objectmapper-in-a-jaxrs-application/'> <img src='/assets/images/posts/2017-11-21-customizing-objectmapper-in-a-jaxrs-application/cover.jpg' alt='Customizing ObjectMapper in a JAX-RS application'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2017-11-21T13:15:59+00:00'>21 Nov 2017</time> </span> </div><h2 class='article__title'>Customizing ObjectMapper in a JAX-RS application</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/jax-rs' class='article__tag'>jax-rs</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Getting known JSON properties from a class using Jackson",
    "category": "",
    "tags": "java, jackson, json",
    "url": "/2017/08/23/getting-known-json-properties-from-a-class-using-jackson/",
    "date": "Aug 23, 2017",
    "content": "jackson popular framework parsing json java api easy introspect arbitrary class properties construct javatype mapper gettypefactory constructtype mydto type beandescription getserializationconfig list beanpropertydefinition findproperties details jsonignoreproperties level annotation account mentioned approach annotationintrospector set string ignoredproperties getannotationintrospector findpropertyignorals getclassinfo getignored filter removing availableproperties stream property - getname collect collectors tolist works mix-ins defined annotated method introduced 2 8 findpropertiestoignore boolean older versions deprecated",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/08/23/getting-known-json-properties-from-a-class-using-jackson/'> <img src='/assets/images/posts/2017-08-23-getting-known-json-properties-from-a-class-using-jackson/cover.jpg' alt='Getting known JSON properties from a class using Jackson'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2017-08-23T11:58:08+00:00'>23 Aug 2017</time> </span> </div><h2 class='article__title'>Getting known JSON properties from a class using Jackson</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/json' class='article__tag'>json</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Cross field validation with Bean Validation",
    "category": "",
    "tags": "java, bean-validation",
    "url": "/2017/06/02/cross-field-validation-with-bean-validation/",
    "date": "Jun 2, 2017",
    "content": "bean validation flexible api writing validators allowing cross field zip code validated country validaddress public class address notnull size max 50 private string street1 street2 10 zipcode 20 city valid getters setters min 2 iso2 documented target type retention runtime constraint validatedby multicountryaddressvalidator interface message default groups extends payload implements constraintvalidator void initialize validateaddress constraintannotation override boolean isvalid constraintvalidatorcontext getcountry null getiso2 getzipcode return true switch case fr check france gr greece",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/06/02/cross-field-validation-with-bean-validation/'> <img src='/assets/images/posts/2017-06-02-cross-field-validation-with-bean-validation/cover.jpg' alt='Cross field validation with Bean Validation'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2017-06-02T10:21:24+00:00'>02 Jun 2017</time> </span> </div><h2 class='article__title'>Cross field validation with Bean Validation</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/bean-validation' class='article__tag'>bean-validation</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Deserializing JSON property as String with Jackson",
    "category": "",
    "tags": "java, json, jackson",
    "url": "/2017/01/24/deserializing-json-property-as-string-with-jackson/",
    "date": "Jan 24, 2017",
    "content": "faced situation parse json payload foo bar biz lorem ipsum signature somehmacsign java class public request private string getters setters challenge read content property valid object array parsed pojo achieved custom deserializer rawjsondeserializer extends jsondeserializer override deserialize jsonparser jp deserializationcontext ctxt throws ioexception jsonprocessingexception objectmapper mapper getcodec jsonnode node readtree return writevalueasstring annotate attribute jsondeserialize annotation referencing created + readvalue defined jackson tree model serialize result equal original spaces tabs breaks order properties implementation long getcurrentlocation getcharoffset skipchildren getsourceref tostring substring int - 1 deserializers exception throw invalid",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2017/01/24/deserializing-json-property-as-string-with-jackson/'> <img src='/assets/images/posts/2017-01-24-deserializing-json-property-as-string-with-jackson/cover.jpg' alt='Deserializing JSON property as String with Jackson'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read •  <time class='article__date' datetime='2017-01-24T15:04:58+00:00'>24 Jan 2017</time> </span> </div><h2 class='article__title'>Deserializing JSON property as String with Jackson</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/json' class='article__tag'>json</a>  <a href='/tag/jackson' class='article__tag'>jackson</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Creating web application with Spring Boot and Jersey",
    "category": "",
    "tags": "java, jersey, spring-boot",
    "url": "/2016/10/07/creating-web-application-with-spring-boot-and-jersey/",
    "date": "Oct 7, 2016",
    "content": "spring boot helps accelerate application development easy create standalone applications embeds web server tomcat jetty deploy war file packed jar java -jar jersey reference implementation jax-rs 2 0 specification solid api creating consuming services post sample ensure pom xml declares spring-boot-starter-parent parent project dependencies plugins xmlns http maven apache org 4 xsi w3 2001 xmlschema-instance schemalocation xsd maven-4 modelversion groupid cassiomolin artifactid spring-jersey version 1 0-snapshot springframework release properties build sourceencoding utf-8 8 dependency spring-boot-starter-web glassfish ext jersey-spring3 spring-boot-starter-test scope test junit plugin spring-boot-maven-plugin collects jars classpath builds single runnable uber convenient execute transport searches public static void main method flag class resource annotated path define handle requests producing text plain greetingresource produces mediatype text_plain response getgreeting return extends resourceconfig register resources component applicationpath jerseyconfig postconstruct private init registerclasses finally springbootapplication string args springapplication service client runwith springrunner springboottest webenvironment random_port greetingresourcetest localserverport int port uri setup throws exception localhost + testgreeting clientbuilder newclient target request entity readentity assertequals compile follow steps open command window terminal navigate root directory resides mvn clean package spring-jersey-1 change 8080 github",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/10/07/creating-web-application-with-spring-boot-and-jersey/'> <img src='/assets/images/posts/2016-10-07-creating-web-application-with-spring-boot-and-jersey/cover.jpg' alt='Creating web application with Spring Boot and Jersey'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read •  <time class='article__date' datetime='2016-10-07T08:33:30+00:00'>07 Oct 2016</time> </span> </div><h2 class='article__title'>Creating web application with Spring Boot and Jersey</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jersey' class='article__tag'>jersey</a>  <a href='/tag/spring-boot' class='article__tag'>spring-boot</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Converting POJO to Map and vice versa with Jackson",
    "category": "",
    "tags": "java, jackson",
    "url": "/2016/09/17/converting-pojo-map-vice-versa-with-jackson/",
    "date": "Sep 17, 2016",
    "content": "quick convert pojo map jackson create objectmapper instance mapper converting string object convertvalue foo typereference anotherfoo class documentation method functionally serializing json binding data type efficient serialization occur converters serializers deserializers meaning configuration works",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/09/17/converting-pojo-map-vice-versa-with-jackson/'> <img src='/assets/images/posts/2016-09-17-converting-pojo-map-vice-versa-with-jackson/cover.jpg' alt='Converting POJO to Map and vice versa with Jackson'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2016-09-17T08:21:54+00:00'>17 Sep 2016</time> </span> </div><h2 class='article__title'>Converting POJO to Map and vice versa with Jackson</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jackson' class='article__tag'>jackson</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Performing action when web application is starting and shutting down",
    "category": "",
    "tags": "cdi, ejb, java, servlet",
    "url": "/2016/09/09/performing-action-when-web-application-is-starting-and-shutting-down/",
    "date": "Sep 9, 2016",
    "content": "ways perform actions web application starting shutting servletcontextlistener servlet api code trick weblistener public class startuplistener implements override void contextinitialized servletcontextevent event action startup contextdestroyed shutdown applicationscoped observes cdi enabled init initialized servletcontext context destroy destroyed javax enterprise package faces bean singleton ejb postconstruct predestroy",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/09/09/performing-action-when-web-application-is-starting-and-shutting-down/'> <img src='/assets/images/posts/2016-09-09-performing-action-when-web-application-is-starting-and-shutting-down/cover.jpg' alt='Performing action when web application is starting and shutting down'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2016-09-09T12:35:19+00:00'>09 Sep 2016</time> </span> </div><h2 class='article__title'>Performing action when web application is starting and shutting down</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/cdi' class='article__tag'>cdi</a>  <a href='/tag/ejb' class='article__tag'>ejb</a>  <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/servlet' class='article__tag'>servlet</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Which HTTP status codes are cacheable?",
    "category": "",
    "tags": "http",
    "url": "/2016/09/09/which-http-status-codes-are-cacheable/",
    "date": "Sep 9, 2016",
    "content": "short answer rfc 7231 current reference content semantics http 1 protocol status codes defined cacheable method definition explicit cache controls 200 203 non-authoritative 204 206 partial 300 multiple choices 301 moved permanently 404 405 allowed 410 414 uri long 501 implemented default 6 overview responses specification reused heuristic expiration extensible recipient note response unrecognized code status-code element three-digit integer result attempt understand satisfy request clients required meaning registered understanding desirable client class digit treat equivalent x00 exception depends 4 2 3 methods stored future reuse general safe depend authoritative defines head post overwhelming majority implementations support requests include freshness details check additional resources 7234 caching browsers store",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/09/09/which-http-status-codes-are-cacheable/'> <img src='/assets/images/posts/2016-09-09-which-http-status-codes-are-cacheable/cover.jpg' alt='Which HTTP status codes are cacheable?'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2016-09-09T08:19:32+00:00'>09 Sep 2016</time> </span> </div><h2 class='article__title'>Which HTTP status codes are cacheable?</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/http' class='article__tag'>http</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Using Jackson as JSON provider in Jersey 2.x",
    "category": "",
    "tags": "jackson, java, jersey, json",
    "url": "/2016/08/10/using-jackson-as-json-provider-in-jersey-2x/",
    "date": "Aug 10, 2016",
    "content": "producing consuming json jersey application provider error message body writer java class mime media type time writing 2 integrates modules provide support moxy api processing json-p jackson jettison options mentioned offers features parsing steps popular parser adding module dependencies add jersey-media-json-jackson pom xml file dependency groupid org glassfish artifactid version 23 1 jersey-media-json-jackson1 artifact registering register jacksonfeature jackson1feature resourceconfig sub-class applicationpath public myapplication extends override set getclasses classes hashset return web deployment descriptor feature fully-qualified config server classnames initialization parameter init-param param-name param-value resources providers separate names comma case interested implementation messagebodywriter jacksonjsonprovider details check documentation common representations",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/08/10/using-jackson-as-json-provider-in-jersey-2x/'> <img src='/assets/images/posts/2016-08-10-using-jackson-as-json-provider-in-jersey-2x/cover.jpg' alt='Using Jackson as JSON provider in Jersey 2.x'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2016-08-10T12:58:15+00:00'>10 Aug 2016</time> </span> </div><h2 class='article__title'>Using Jackson as JSON provider in Jersey 2.x</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jersey' class='article__tag'>jersey</a>  <a href='/tag/json' class='article__tag'>json</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Using Jackson and JSON Pointer to query and parse an arbitrary JSON node",
    "category": "",
    "tags": "java, jackson, json",
    "url": "/2016/07/13/using-jackson-and-json-pointer-to-query-and-parse-an-arbitrary-json-node/",
    "date": "Jul 13, 2016",
    "content": "json pointer string syntax identifying specific document defined rfc 6901 firstname john lastname doe address street 21 2nd city york postalcode 10021-3100 coordinates latitude 40 7250387 longitude -73 9932568 node identified expression jackson 2 3 0 introduced support handy query + objectmapper mapper jsonnode readtree coordinatesnode parsed bean public class private double getters setters treetovalue",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/07/13/using-jackson-and-json-pointer-to-query-and-parse-an-arbitrary-json-node/'> <img src='/assets/images/posts/2016-07-13-using-jackson-and-json-pointer-to-query-and-parse-an-arbitrary-json-node/cover.jpg' alt='Using Jackson and JSON Pointer to query and parse an arbitrary JSON node'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2016-07-13T13:19:05+00:00'>13 Jul 2016</time> </span> </div><h2 class='article__title'>Using Jackson and JSON Pointer to query and parse an arbitrary JSON node</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jackson' class='article__tag'>jackson</a>  <a href='/tag/json' class='article__tag'>json</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Why you should use DTOs in your REST API",
    "category": "",
    "tags": "rest, java, dto",
    "url": "/2016/03/23/why-you-should-use-dtos-in-your-rest-api/",
    "date": "Mar 23, 2016",
    "content": "dto stands data transfer object pattern created defined purpose remote interfaces web services fits rest api dtos flexibility long models represent domain application handled concerns decoupled break clients add remove rename field model service layer operates persistence controllers operate set evolve support business requirements create versions deprecate released perfectly achieve mention benefits exposing decouple tailored great attributes entities annotations xmltransient jsonignore avoid serialization hell bloated control receiving creating updating resource swagger apimodel apimodelproperty document messing version mapping relationships media types list links hateoas kind objects spring classes extend resourcesupport wrap dealing boilerplate code map vice versa mannually frameworks instance mapstruct annotation based works maven processor cdi spring-based applications lombok generate getters setters equals hashcode tostring methods names refer post answer stack overflow",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/03/23/why-you-should-use-dtos-in-your-rest-api/'> <img src='/assets/images/posts/2016-03-23-why-you-should-use-dtos-in-your-rest-api/cover.jpg' alt='Why you should use DTOs in your REST API'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2016-03-23T10:16:45+00:00'>23 Mar 2016</time> </span> </div><h2 class='article__title'>Why you should use DTOs in your REST API</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/rest' class='article__tag'>rest</a>  <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/dto' class='article__tag'>dto</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Types that can be injected with @Context in JAX-RS 2.0",
    "category": "",
    "tags": "java, jax-rs",
    "url": "/2016/03/08/types-that-can-be-injected-with-context-in-jaxrs-20/",
    "date": "Mar 8, 2016",
    "content": "context annotation inject request response details jax-rs provider resource classes injection performed class field bean property method parameter list summarizes types injected 2 0 specification javax ws rs core application httpheaders securitycontext uriinfo configuration container resourcecontext ext providers injectable client server-side deployed servlet httpservletrequest httpservletresponse servletconfig servletcontext 1 introduced sse sseeventsink standard listed implementations jersey resteasy apache cxf define quick description type instance application-supplied subclass access centralized uris uri templates static dynamic per-request components headers header map form typed convenience methods content negotiation preconditions caller determine matching representation variant evaluate current matches security interface provide user principal roles assumed requester arrived secure channel authentication scheme lookup instances based set search criteria expected authors wishing functionality server instantiation initialization subresource default scope creation created runtime configurations events represents incoming connection send factory broadcasters",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/03/08/types-that-can-be-injected-with-context-in-jaxrs-20/'> <img src='/assets/images/posts/2016-03-08-types-that-can-be-injected-with-context-in-jaxrs-20/cover.jpg' alt='Types that can be injected with @Context in JAX-RS 2.0'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>3 min read •  <time class='article__date' datetime='2016-03-08T13:25:08+00:00'>08 Mar 2016</time> </span> </div><h2 class='article__title'>Types that can be injected with @Context in JAX-RS 2.0</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jax-rs' class='article__tag'>jax-rs</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Give better names to your DTOs",
    "category": "",
    "tags": "java, dto",
    "url": "/2016/02/11/give-better-names-to-your-dtos/",
    "date": "Feb 11, 2016",
    "content": "java language specification convention classes names class types descriptive nouns noun phrases overly long mixed case letter word capitalized classloader securitymanager thread dictionary bufferedinputstream data transfer object follow mentioned suffixing dto meaningful purpose suggestions somesortofcommand somesortofconfiguration somesortofcredentials somesortofdetails somesortofelement somesortofevent somesortofheader somesortofinput somesortofinstruction somesortofitem somesortofmessage somesortofmetadata somesortofoperation somesortofoutput somesortofpayload somesortofprojection somesortofqueryparameter somesortofqueryresult somesortofrepresentation somesortofrequest somesortofresource somesortofresponse somesortofresult somesortofrow somesortofsettings somesortofspecification somesortofstatus somesortofsummary note 1 acronyms handled guess check api stumbles zipinputstream gzipinputstream package consistent httpurlconnection consistency 2 listed borrowed article written richard dingwall original longer cached copy web archive",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2016/02/11/give-better-names-to-your-dtos/'> <img src='/assets/images/posts/2016-02-11-give-better-names-to-your-dtos/cover.jpg' alt='Give better names to your DTOs'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>1 min read •  <time class='article__date' datetime='2016-02-11T14:14:09+00:00'>11 Feb 2016</time> </span> </div><h2 class='article__title'>Give better names to your DTOs</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/dto' class='article__tag'>dto</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Adding Maven dependencies to Arquillian test",
    "category": "",
    "tags": "java, test, arquillian",
    "url": "/2015/06/07/adding-maven-dependencies-to-arquillian-test/",
    "date": "Jun 7, 2015",
    "content": "default arquillian pack maven dependencies micro deployment files classes testing depend external managed follow steps ensure packed deployments avoiding classnotfoundexceptions adding add pom xml dependencymanagement dependency groupid org jboss artifactid arquillian-bom version 1 8 final scope import type shrinkwrap resolver implementation shrinkwrap-resolver-impl-maven test junit container arquillian-junit-container importing class method annotated runtime file loadpomfromfile importruntimedependencies resolve withtransitivity asfile deploy addaslibraries create webarchive addclass myclass1 myclass2 myclass3 java io api asset emptyasset spec runner runwith static assert public mytestclasswithmavendependencies createdeployment war structure println tostring true return tests note solution tested check artifacts documentation 2 details resolvers",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2015/06/07/adding-maven-dependencies-to-arquillian-test/'> <img src='/assets/images/posts/2015-06-07-adding-maven-dependencies-to-arquillian-test/cover.jpg' alt='Adding Maven dependencies to Arquillian test'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>2 min read •  <time class='article__date' datetime='2015-06-07T14:57:56+00:00'>07 Jun 2015</time> </span> </div><h2 class='article__title'>Adding Maven dependencies to Arquillian test</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/test' class='article__tag'>test</a>  <a href='/tag/arquillian' class='article__tag'>arquillian</a> </span></div></div></div></div></div>"
  },

  {
    "title": "Token-based authentication with JAX-RS 2.0",
    "category": "",
    "tags": "authentication, java, jax-rs",
    "url": "/2014/11/06/token-based-authentication-with-jaxrs-20/",
    "date": "Nov 6, 2014",
    "content": "token-based authentication client exchanges hard credentials username password piece data called token request sending send server perform authorization scheme based tokens follow steps sends authenticates valid generate user stores generated storage identifier expiration extracts incoming details accepts invalid refuses performed performs provide endpoint refresh note step 3 required issued signed jwt stateless jax-rs 2 0 jersey resteasy apache cxf solution api avoiding vendor specific work implementations worthwhile mention relying standard java ee web application security mechanisms offered servlet container configurable application’s xml descriptor custom authenticating issuing create resource method receives validates issue path public class authenticationendpoint post produces mediatype application_json consumes application_form_urlencoded response authenticateuser formparam string authenticate issuetoken return build catch exception status forbidden private void throws database ldap file throw random persisted exceptions thrown validating 403 returned validated 200 payload consuming x-www-form-urlencoded format admin amp 123456 form params wrap implements serializable getters setters consume json getusername getpassword approach extracting http header bearer token-goes-here unfortunate carries namebinding meta-annotation annotations bind filters interceptors classes methods define secured annotation retention runtime target type interface defined name-binding decorate filter containerrequestfilter allowing intercept handled containerrequestcontext access headers extract provider priority priorities authenticationfilter static final authentication_scheme override requestcontext ioexception authorizationheader getheaderstring httpheaders validate istokenbasedauthentication abortwithunauthorized substring length trim validatetoken boolean check null prefixed whitespace comparison case-insensitive tolowercase startswith + abort chain 401 code www-authenticate abortwith unauthorized www_authenticate expired problems happen validation proceed securing rest endpoints annotate created annotated executed reached simply exampleresource myunsecuredmethod pathparam long won invoking delete mysecuredmethod identifying current performing agains approaches achieve overriding context securitycontext instance set getuserprincipal returning principal currentsecuritycontext getsecuritycontext setsecuritycontext getname isuserinrole role true issecure getauthenticationscheme principal’s inject mymethod cdi dependency injection reason features events producers qualifier field parameter authenticateduser event userauthenticatedevent succeeds passing remember represents bean handle correspondent assign producer requestscoped authenticateduserproducer handleauthenticationevent observes finduser hit service injected managed beans services servlets ejbs fact proxy javax enterprise ws rs key share wan’t modify store authenticated scoped read compared overrides resources providers opaque reveals self-contained generating persisting good securerandom biginteger 130 tostring 32 representing claims securely parties rfc 7519 enables stored encoded base64 registered iss subject exp nbf time start accepted processing iat jti unique aware sensitive passwords integrity easily checked verifying signature prevents tampered persist track althought possibility invalidating revoking claim removing order prevent growing indefinitely libraries jjwt java-jwt jose4j great io handling refreshment accept non-expired responsability refreshed adding names refreshlimit times refreshcount conditions number refreshing update some-amount-of-time increment refreshcount++ alternatively keeping refreshments absolute works pretty acceptable involves separate long-lived short-lived depends requirements revocation revoke metadata uuid ensure revoked checking identifiers purposes change additional matter decide https connection man-in-the-middle attack question article",
    "article": "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2014/11/06/token-based-authentication-with-jaxrs-20/'> <img src='/assets/images/posts/2014-11-06-token-based-authentication-with-jaxrs-20/cover.jpg' alt='Token-based authentication with JAX-RS 2.0'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>18 min read •  <time class='article__date' datetime='2014-11-06T11:17:03+00:00'>06 Nov 2014</time> </span> </div><h2 class='article__title'>Token-based authentication with JAX-RS 2.0</h2> <p class='article__excerpt'></p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='cassiomolin'><img class='article__author-image' src='/assets/images/cassiomolin.jpg' alt='cassiomolin's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>cassiomolin</a><span> in </span> <span class='article-tags'> <a href='/tag/authentication' class='article__tag'>authentication</a>  <a href='/tag/java' class='article__tag'>java</a>  <a href='/tag/jax-rs' class='article__tag'>jax-rs</a> </span></div></div></div></div></div>"
  }
]
